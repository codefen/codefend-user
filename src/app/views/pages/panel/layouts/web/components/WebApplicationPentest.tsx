import { PrimaryButton } from '@buttons/primary/PrimaryButton';
import SimpleSection from '@defaults/SimpleSection';
import { CodefendLogo } from '@icons';
import type { Webresource } from '@interfaces/index';
import { StatAsset } from '@standalones/stat-asset/StatAsset';
import { useOrderStore } from '@stores/orders.store';
import useTableStoreV3 from '@table/v3/tablev3.store';
import { flattenRows } from '@utils/sort.service';
import type { FC } from 'react';

interface WebApplicationPentestProps {
  webResources: Webresource[];
  isLoading: boolean;
}

const WebApplicationPentest: FC<WebApplicationPentestProps> = ({ webResources, isLoading }) => {
  const { selectedItems } = useTableStoreV3();
  const { updateState } = useOrderStore(state => state);
  const resourceCount = selectedItems.length;
  const resourceSelected: Webresource[] = flattenRows(webResources).filter(resource =>
    selectedItems.includes(resource.id)
  );
  const subDomainCount = resourceSelected.filter(
    resource => resource.resource_domain_dad !== ''
  ).length;
  const domainCount = resourceSelected.length - subDomainCount;

  return (
    <div className="card launch-pentest-card">
      <SimpleSection header="Resource selected" icon={<CodefendLogo />}>
        <div className="content">
          <div className="pentest-info-container">
            <StatAsset value={domainCount} valueTitle="Domains" />
            <StatAsset value={subDomainCount} valueTitle="Subdomains" />
          </div>
          <PrimaryButton
            text="REQUEST PENTEST ON DEMAND"
            click={() => updateState('open', true)}
            className="pentest-btn"
            isDisabled={selectedItems.length === 0 || isLoading}
            disabledLoader
          />
        </div>
      </SimpleSection>
    </div>
  );
};

export default WebApplicationPentest;
