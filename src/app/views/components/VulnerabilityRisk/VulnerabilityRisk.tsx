import { useMemo, type FC } from 'react';
import { Doughnut } from 'react-chartjs-2';
import { isEmptyData } from '@utils/helper';
import useDoughnutChart from '@hooks/common/useChart';
import { MetricsService } from '@utils/metric.service';
import { type IssuesShare, ChartValueType } from '@interfaces/panel';
import type { ColumnTableV3 } from '@interfaces/table';
import Tablev3 from '@table/v3/Tablev3';

interface VulnerabilityRiskProps {
  vulnerabilityByRisk: IssuesShare;
  isLoading: boolean;
}

export const vulnerabilityRiskColumns: ColumnTableV3[] = [
  {
    header: 'Risk',
    key: 'risk',
    styles: 'item-vuln-1',
    weight: '35%',
    render: (row: any) => row,
  },
  {
    header: 'Count',
    key: 'count',
    styles: 'item-vuln-2',
    weight: '30%',
    render: (row: any) => row,
  },
  {
    header: 'Percentage',
    key: 'percent',
    styles: 'item-vuln-3',
    weight: '35%',
    render: (row: any) => row,
  },
];

export const VulnerabilityRisk: FC<VulnerabilityRiskProps> = ({
  vulnerabilityByRisk,
  isLoading,
}) => {
  const { chartData, otherMetrics, total, chartOptions } = useDoughnutChart({
    data: vulnerabilityByRisk,
    type: ChartValueType.PLAIN,
  });

  const dataEmptyState = useMemo(() => {
    const { total, ...otherMetrics } = vulnerabilityByRisk;
    return isEmptyData(otherMetrics);
  }, [vulnerabilityByRisk]);

  const { renderPercentage } = MetricsService;

  const tableRows = !dataEmptyState
    ? Object.keys(otherMetrics).map((metric: string | number) => ({
        risk: metric,
        count: otherMetrics[metric as keyof typeof otherMetrics],
        percent: renderPercentage(
          String(otherMetrics[metric as keyof typeof otherMetrics]),
          String(total)
        ),
      }))
    : [];

  return (
    <div className="card risk-chart">
      <div className="content">
        <Tablev3
          rows={tableRows}
          columns={vulnerabilityRiskColumns}
          showRows={!isLoading}
          emptyInfo="No vulnerabilities associated with the resource were found"
        />
        <div className="chart">
          <Doughnut data={chartData} options={chartOptions} />
        </div>
      </div>
    </div>
  );
};
