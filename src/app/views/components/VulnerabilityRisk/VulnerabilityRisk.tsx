import { useMemo, type FC } from 'react';
import { Doughnut } from 'react-chartjs-2';
import { isEmptyData } from '@utils/helper';
import useDoughnutChart from '@hooks/common/useChart';
import { MetricsService } from '@utils/metric.service';
import { type IssuesShare, ChartValueType } from '@interfaces/panel';
import type { ColumnTableV3 } from '@interfaces/table';
import Tablev3 from '@table/v3/Tablev3';
import { useNavigate } from 'react-router';
import { useTheme } from '@/app/views/context/ThemeContext';
import { TABLE_KEYS } from '@/app/constants/app-texts';

interface VulnerabilityRiskProps {
  vulnerabilityByRisk: IssuesShare;
  isLoading: boolean;
}

// Mapeo de colores para cada nivel de riesgo (mismo que en useChart.ts)
const getRiskColor = (riskLevel: string, theme: string): string => {
  const colorMap: Record<string, { light: string; dark: string }> = {
    critical: { light: '#e85050', dark: '#491C21' },
    elevated: { light: '#e25365', dark: '#671830' },
    medium: { light: '#e97e8b', dark: '#961933' },
    low: { light: '#f1a7b1', dark: '#C9183B' },
    intel: { light: '#dbdbdb', dark: '#CF1118' },
  };
  
  const colors = colorMap[riskLevel];
  return colors ? (theme === 'light' ? colors.light : colors.dark) : '#cccccc';
};

// Componente de línea proporcional para el nivel de riesgo
const RiskProportionalBar = ({ riskLevel, percentage }: { riskLevel: string, percentage: string }) => {
  const { theme } = useTheme();
  const color = getRiskColor(riskLevel, theme);
  
  // Extraer el número del porcentaje (ej: "46%" -> 46)
  const percentValue = parseInt(percentage.replace('%', '')) || 0;
  
  return (
    <div 
      style={{ 
        position: 'relative', 
        width: '100%',
        // CRITICAL: Override table cell constraints that break the layout
        whiteSpace: 'normal !important' as any,
        overflow: 'visible !important' as any,
        textOverflow: 'unset !important' as any,
      }}
    >
      <div style={{ 
        display: 'flex', 
        alignItems: 'center', 
        gap: '8px',
        // Ensure content doesn't wrap or get constrained
        flexWrap: 'nowrap',
      }}>
        {/* Cuadradito de color */}
        <div
          style={{
            width: '16px',
            height: '16px',
            minWidth: '16px',
            minHeight: '16px',
            maxWidth: '16px',
            maxHeight: '16px',
            backgroundColor: color,
            borderRadius: '3px',
            flexShrink: 0,
            flexGrow: 0,
            display: 'block',
            // Force perfect square with important overrides
            aspectRatio: '1',
            boxSizing: 'border-box',
          }}
        />
        <span style={{ flexShrink: 0 }}>{riskLevel}</span>
      </div>
      {/* Línea proporcional que se extiende a través de las 3 columnas */}
      <div
        style={{
          position: 'absolute',
          bottom: '-2px',
          left: '0',
          width: `calc(${percentValue} * 100% / 35)`, // Escala el porcentaje al ancho total (columna Risk = 35% del total)
          height: '5px',
          backgroundColor: color,
          borderRadius: '2.5px',
          zIndex: 1,
        }}
      />
    </div>
  );
};

export const vulnerabilityRiskColumns: ColumnTableV3[] = [
  {
    header: 'Risk',
    key: 'risk',
    type: TABLE_KEYS.FULL_ROW,
    styles: 'item-vuln-1',
    weight: '35%',
    render: (row: any) => <RiskProportionalBar riskLevel={row.risk} percentage={row.percent} />,
  },
  {
    header: 'Count',
    key: 'count',
    styles: 'item-vuln-2',
    weight: '30%',
    render: (row: any) => row,
  },
  {
    header: 'Percentage',
    key: 'percent',
    styles: 'item-vuln-3',
    weight: '35%',
    render: (row: any) => row,
  },
];

const riskyValuesMap = {
  intel: 1,
  low: 2,
  medium: 3,
  elevated: 4,
  critical: 5,
};

export const VulnerabilityRisk: FC<VulnerabilityRiskProps> = ({
  vulnerabilityByRisk,
  isLoading,
}) => {
  const { chartData, otherMetrics, total, chartOptions } = useDoughnutChart({
    data: vulnerabilityByRisk,
    type: ChartValueType.PLAIN,
  });

  const dataEmptyState = useMemo(() => {
    const { total, ...otherMetrics } = vulnerabilityByRisk;
    return isEmptyData(otherMetrics);
  }, [vulnerabilityByRisk]);

  const { renderPercentage } = MetricsService;
  const navigate = useNavigate();

  const handleNavigate = (risk: string) => {
    navigate(`/issues?riskScore=${riskyValuesMap[risk as keyof typeof riskyValuesMap]}`);
  };

  const tableRows = !dataEmptyState
    ? Object.keys(otherMetrics).map((metric: string | number) => ({
        risk: metric,
        count: otherMetrics[metric as keyof typeof otherMetrics],
        percent: renderPercentage(
          String(otherMetrics[metric as keyof typeof otherMetrics]),
          String(total)
        ),
      }))
    : [];

  return (
    <div className="card risk-chart">
      <div className="content">
        <Tablev3
          rows={tableRows}
          columns={vulnerabilityRiskColumns}
          showRows={true}
          showSkeleton={isLoading}
          totalRowCount={5}
          emptyInfo="No vulnerabilities associated with the resource were found"
          action={(row: any) => handleNavigate(row?.risk)}
          className="table-riskscores"
        />
        <div className="chart">
          <Doughnut data={chartData} options={chartOptions} />
        </div>
      </div>
    </div>
  );
};
