import React, { useMemo } from 'react';
import { Doughnut } from 'react-chartjs-2';
import { SimpleSection } from '@defaults/SimpleSection';
import Show from '@defaults/Show';
import EmptyCard from '@defaults/EmptyCard';
import { BugIcon } from '@icons';
import { isEmptyData } from '@utils/helper';
import useDoughnutChart from '@hooks/common/useChart';
import { MetricsService } from '@utils/metric.service';
import { vulnerabilityRiskColumns } from '@mocks/defaultData';
import { TableV2 } from '@table/tablev2';
import { type IssuesShare, ChartValueType } from '@interfaces/panel';
import type { TableItem } from '@interfaces/table';

interface VulnerabilityRiskProps {
  vulnerabilityByRisk: IssuesShare;
  isLoading: boolean;
}

export const VulnerabilityRisk: React.FC<VulnerabilityRiskProps> = ({
  vulnerabilityByRisk,
  isLoading,
}) => {
  const { chartData, otherMetrics, total, chartOptions } = useDoughnutChart({
    data: vulnerabilityByRisk,
    type: ChartValueType.PLAIN,
  });

  const dataEmptyState = useMemo(() => {
    const { total, ...otherMetrics } = vulnerabilityByRisk;
    return isEmptyData(otherMetrics);
  }, [vulnerabilityByRisk]);

  const { renderPercentage } = MetricsService;

  const tableRows = Object.keys(otherMetrics).map(
    (metric: string | number) =>
      ({
        ID: { value: '', style: '' },
        risk: { value: metric, style: 'risk' },
        count: {
          value: otherMetrics[metric as keyof typeof otherMetrics],
          style: 'count',
        },
        percent: {
          value: renderPercentage(
            String(otherMetrics[metric as keyof typeof otherMetrics]),
            String(total)
          ),
          style: 'percent',
        },
      }) as Record<string, TableItem>
  );

  return (
    <div className="card risk-chart">
      <SimpleSection header="Vulnerabilities by risk" icon={<BugIcon />}>
        <div className="content">
          <Show
            when={!dataEmptyState}
            fallback={
              <EmptyCard info="No vulnerabilities associated with the resource were found" />
            }>
            <>
              <div className="chart">
                <Doughnut data={chartData} options={chartOptions} />
              </div>

              <TableV2
                rowsData={tableRows}
                columns={vulnerabilityRiskColumns}
                showRows={!isLoading}
                showEmpty={!isLoading && tableRows.length === 0}
              />
            </>
          </Show>
        </div>
      </SimpleSection>
    </div>
  );
};
