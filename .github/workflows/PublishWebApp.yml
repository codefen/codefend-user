
name: 'Deploy'

on:
  workflow_call:
  workflow_dispatch:

jobs:
  publish_webapp:
    if: "github.event.repository.fork == false"
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v3
    
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4.0.3
        with:
          node-version: 20.x

      - name: 🛠️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📤 Notify deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: release

      - name: 🛠️ Install dependencies
        run: bun install

      - name: ✏️ Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/index.php" >> .env
          echo "VITE_NODE_ENV=production" >> .env
          echo "VITE_STRIPE_KEY_LIVE=${{ secrets.STRIPE_KEY }}" >> .env
          echo "VITE_STRIPE_KEY_TEST=${{ secrets.STRIPE_KEY_TEST }}" >> .env
          
      - name: 🔨 Run build client
        run: bun run build

      # - name: 🚀 Publish to FTP
      #   uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      #   with:
      #     server: ${{ secrets.FTP_SERVER }}
      #     username: ${{ secrets.FTP_USERNAME }}
      #     password: ${{ secrets.FTP_PASSWORD }}
      #     local-dir: ./dist/
      #     server-dir: ./
      #     protocol: ftp
      #     dangerous-clean-slate: true

      - name: 🚀 Deploy to staging directory
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/
          server-dir: ./staging/
          protocol: ftp
          dangerous-clean-slate: true

      - name: 🔄 Switch directories atomically
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          script: |
            set -e
            echo "📁 Creando backup_temp..."
            mkdir -p backup_temp

            echo "📦 Moviendo archivos (excepto staging y backup_temp)..."
            for entry in * .[^.]*; do
              if [[ "$entry" != "staging" && "$entry" != "backup_temp" && "$entry" != "." && "$entry" != ".." ]]; then
                echo "➡️  Moviendo $entry a backup_temp/"
                mv -f "$entry" backup_temp/ || true
              fi
            done

            echo "📂 Moviendo contenido de staging al root..."
            if [ -d "staging" ] && [ "$(ls -A staging)" ]; then
              mv -f staging/* ./ || true
              shopt -s dotglob
              mv -f staging/.* ./ 2>/dev/null || true
              shopt -u dotglob
            fi

            echo "🧹 Eliminando staging y backup_temp..."
            rmdir staging 2>/dev/null || true
            rm -rf backup_temp

            echo "✅ Despliegue completado"

      - name: 📤 Notify deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}