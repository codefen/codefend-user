name: WindowsBuildAndRelease

on:
  workflow_call:
    inputs:
      release_id:
        required: true
        type: string
      package_version:
        required: true
        type: string
      release_upload_url:
        required: true
        type: string
    outputs:
      windows_x86_64_sig:
        description: "Signature for Windows x86_64 build"
        value: ${{ jobs.windowsBuilding.outputs.windows_x86_64_sig }}
      windows_x86_64_name:
        description: "Name for Windows x86_64 build"
        value: ${{ jobs.windowsBuilding.outputs.windows_x86_64_name }}
  workflow_dispatch:


jobs:
  windowsBuilding:
    if: "github.event.repository.fork == false"
    name: BuildWindows
    permissions:
      contents: write
      id-token: write
      security-events: write
      attestations: write
    outputs:
      windows_x86_64_sig: ${{ steps.extract-signatures.outputs.windows_x86_64_sig }}
      windows_x86_64_name: ${{ steps.extract-signatures.outputs.windows_x86_64_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
            platform: windows/x86_64

    runs-on: windows-latest
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Setup/ Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üõ†Ô∏è Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üõ†Ô∏è Install dependencies
        run: bun install

      - name: üåç Export GitHub Actions cache environment variables windows
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: üîß Install system dependencies
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md
          choco install wget -y
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: ü¶Ä Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: ‚úèÔ∏è Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/index.php" >> .env
          echo "VITE_NODE_ENV=production" >> .env
          echo "VITE_STRIPE_KEY_LIVE=${{ secrets.STRIPE_KEY }}" >> .env
          echo "VITE_STRIPE_KEY_TEST=${{ secrets.STRIPE_KEY_TEST }}" >> .env
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env

      - name: üî® Run build client
        run: bun run build

      - name: üì• Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.1.0
          locked: true

      # - name: üîë Import windows signing certificate
      #   env:
      #     WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      #     WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      #   run: |
      #     New-Item -ItemType directory -Path certificate
      #     Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
      #     certutil -decode certificate/tempCert.txt certificate/certificate.pfx
      #     Remove-Item -path certificate -include tempCert.txt
      #     Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      #     # Importar al almac√©n de certificados
      #     $pfxPassword = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText
      #     Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pfxPassword
          
      #     # Verificar la importaci√≥n
      #     $cert = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Subject -like "*Codefend*" }
      #     if (-not $cert) {
      #       Write-Error "Certificate not found after import"
      #       exit 1
      #     }

      - name: üîë Import Windows signing certificate
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          $certDir = New-Item -ItemType directory -Path "certificate" -Force
          
          try {
            # Decodificar certificado
            Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
            certutil -decode certificate/tempCert.txt certificate/certificate.pfx
            
            # Verificar que el archivo PFX se cre√≥ correctamente
            if (-not (Test-Path certificate/certificate.pfx)) {
              Write-Error "Failed to decode certificate"
              exit 1
            }
            
            # Importar certificado
            $pfxPassword = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText
            $cert = Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pfxPassword
            
            # Verificar la importaci√≥n
            $importedCert = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Thumbprint -eq $cert.Thumbprint }
            if (-not $importedCert) {
              Write-Error "Certificate not found after import"
              exit 1
            }
            
            Write-Host "Certificate imported successfully. Thumbprint: $($cert.Thumbprint)"
            
            # echo "CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
            Write-Host "::set-output name=CERT_THUMBPRINT::$($cert.Thumbprint)"
            
          } finally {
            if (Test-Path certificate/tempCert.txt) {
              Remove-Item certificate/tempCert.txt -Force
            }
            if (Test-Path certificate/certificate.pfx) {
              Remove-Item certificate/certificate.pfx -Force
            }
          }

      - name: üî® Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@v0.5.20 # v0.5.17 - UPDATE to v0.5.20
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_BUNDLE_IDENTIFIER: "com.codefend.app"
          TAURI_BUNDLE_VERSION: ${{ inputs.package_version }}
        with:
          releaseId: ${{ inputs.release_id }}
          args: '--verbose'

      # - name: üîç Verify executable signature
      #   run: |
      #     $package_version = "${{ inputs.package_version }}"
      #     $exePath = Get-ChildItem "src-tauri\target\release\bundle\nsis" -Filter "*${{ inputs.package_version }}_x64-setup.exe" | Sort-Object LastWriteTime -Descending | Select-Object -First 1

      #     if (-not $exePath) {
      #       Write-Error "No matching executable found"
      #       exit 1
      #     }
          
      #     # if (-not (Test-Path $exePath)) {
      #     #   Write-Error "Executable not found: $exePath"
      #     #   exit 1
      #     # }
          
      #     # Verificar firma digital
      #     $signature = Get-AuthenticodeSignature -FilePath $exePath
      #     if ($signature.Status -ne "Valid") {
      #       Write-Error "Executable is not properly signed. Status: $($signature.Status)"
      #       exit 1
      #     }
          
      #     Write-Host "Executable is properly signed"
      #     Write-Host "Signer: $($signature.SignerCertificate.Subject)"
      #     Write-Host "Timestamp: $($signature.TimeStamperCertificate.Subject)"

      - name: üìù Extract Signatures and Set Outputs
        id: extract-signatures
        run: |
          $package_version = "${{ inputs.package_version }}"
          
          function Read-Signature {
            param([string]$file)
            
            if (-Not (Test-Path $file)) {
              Write-Error "Error: File $file not found"
              exit 1
            }
            
            $signature = Get-Content $file -Raw
            return $signature.Trim()
          }

          $sigFile = Get-ChildItem -Path "src-tauri\target\release\bundle\nsis" -Filter "*_${package_version}_x64-setup.exe.sig" | Select-Object -First 1

          if (-Not $sigFile) {
            Write-Error "‚ùå Signature file not found for version $package_version"
            exit 1
          }

          $sigPath = $sigFile.FullName
          $artifactPath = $sigPath -replace '\.sig$', ''
          $artifactName = Split-Path $artifactPath -Leaf

          # Leer y exponer firma
          $windows_x86_64_sig = Read-Signature $sigPath
          Write-Host "::set-output name=windows_x86_64_sig::$windows_x86_64_sig"

          # Exponer el nombre del artefacto real
          Write-Host "::set-output name=windows_x86_64_name::$artifactName"

          Write-Host "‚úÖ Signature and artifact name extracted successfully."
          Write-Host "Signature path: $sigPath"
          Write-Host "Artifact name: $artifactName"

      # - name: üõ°Ô∏è Attest build provenance (publish release only)
      #   uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
      #   env:
      #     CARGO_HOME: /home/runner/.cargo
      #     CARGO_INCREMENTAL: 0
      #     CARGO_TERM_COLOR: always
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     subject-path: src-tauri/target/release/bundle/*
      #     push-to-registry: false
      #     show-summary: true
      #     github-token: ${{ env.GITHUB_TOKEN }}
  
      # - name: üìú Create SBOM
      #   uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
      #   with:
      #     format: "spdx-json"
      #     output-file: "sbom.spdx.json"
      #     artifact-name: "windows_${{ matrix.target }}.sbom.spdx.json"
  
      # - name: üõ°Ô∏è Attest SBOM
      #   uses: actions/attest-sbom@cbfd0027ae731a5892db25ecd226930d7ffd19eb # v2
      #   with:
      #     subject-path: 'src-tauri/target/release/codefend-panel.exe'
      #     sbom-path: "sbom.spdx.json"

      - name: üõ°Ô∏è Attest build provenance
        uses: actions/attest-build-provenance@v2.1.0
        with:
          subject-path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
          push-to-registry: false
          show-summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: üìú Create SBOM
        uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "windows_${{ matrix.target }}.sbom.spdx.json"
  
      - name: üõ°Ô∏è Attest SBOM
        uses: actions/attest-sbom@cbfd0027ae731a5892db25ecd226930d7ffd19eb # v2
        with:
          subject-path: "src-tauri/target/release/bundle/nsis/${{ steps.extract-signatures.outputs.windows_x86_64_name }}"
          sbom-path: "sbom.spdx.json"

      - name: üßπ Secure cleanup
        if: always()
        run: |
          # Remover certificado del almac√©n temporal si existe
          if ($env:CERT_THUMBPRINT) {
            $cert = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Thumbprint -eq $env:CERT_THUMBPRINT }
            if ($cert) {
              Remove-Item $cert.PSPath -Force
              Write-Host "Certificate removed from store"
            }
          }
          
          # Limpiar directorio de certificados
          if (Test-Path certificate) {
            Remove-Item certificate -Recurse -Force
          }