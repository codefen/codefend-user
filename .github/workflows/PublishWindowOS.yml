name: WindowsBuildAndRelease

on:
  workflow_call:
    inputs:
      release_id:
        required: true
        type: string
      package_version:
        required: true
        type: string
      release_upload_url:
        required: true
        type: string
    outputs:
      windows_x86_64_sig:
        description: "Signature for Windows x86_64 build"
        value: ${{ jobs.windowsBuilding.outputs.windows_x86_64_sig }}

jobs:
  windowsBuilding:
    if: "github.event.repository.fork == false"
    name: BuildWindows
    permissions:
      contents: write
      id-token: write
      security-events: write
      attestations: write
    outputs:
      windows_x86_64_sig: ${{ steps.extractwindowsx86_64-sig.outputs.windows_x86_64_sig }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
            platform: windows/x86_64

    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup/ Install pnpm 9.7.0 manually
        run: npm install -g pnpm@9.7.0

      - name: Install frontend dependencies
        run: |
          pnpm config set store-dir ~/.pnpm-store
          pnpm install --frozen-lockfile --ignore-scripts

      - name: üåç Export GitHub Actions cache environment variables windows
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: üîë Import windows signing certificate
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      - name: Install system dependencies
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md
          choco install wget -y
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: ü¶Ä Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/kundalini/index.php" >> .env

      - name: Build frontend
        run: pnpm build

      - name: üì• Cached install cargo-auditable
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: cargo-auditable@0.6.6
          locked: true

      - name: üì• Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.1.0
          locked: true

      - name: üî® Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@2a8db2c169af2fdc695133781e27ecba52daea75 # v0.5.17
        env:
          RUSTFLAGS: "-D warnings"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ inputs.release_id }}
          tauriScript: cargo --locked auditable tauri
          args: '--verbose'
          includeAll: true

      - name: Upload Release Assets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const artifacts = [
              'src-tauri/target/release/bundle/msi/codefend-panel_24.3.0_x64_en-US.msi',
              'src-tauri/target/release/bundle/msi/codefend-panel_24.3.0_x64_en-US.msi.sig',
              'src-tauri/target/release/bundle/nsis/codefend-panel_24.3.0_x64-setup.exe',
              'src-tauri/target/release/bundle/nsis/codefend-panel_24.3.0_x64-setup.exe.sig'
            ];

            const releaseId = ${{ inputs.release_id }};
            for (const artifact of artifacts) {
              if (fs.existsSync(artifact)) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId,
                  name: path.basename(artifact),
                  data: fs.readFileSync(artifact)
                });
              }
            }

      - name: Extract Signatures and Set Outputs
        id: extract-signatures
        run: |
          $package_version = "${{ inputs.package_version }}"
          
          function Read-Signature {
            param([string]$file)
            
            if (-Not (Test-Path $file)) {
              Write-Error "Error: File $file not found"
              exit 1
            }
            
            $signature = Get-Content $file -Raw
            return $signature.Trim()
          }

          $windows_x86_64_sig = Read-Signature "src-tauri\target\release\bundle\msi\codefend-panel_${package_version}_x64_en-US.msi.sig"
          
          Write-Host "Signatures extracted successfully."
          Write-Host "::set-output name=windows_x86_64_sig::$windows_x86_64_sig"

      - name: üõ°Ô∏è Attest build provenance (publish release only)
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        env:
          CARGO_HOME: /home/runner/.cargo
          CARGO_INCREMENTAL: 0
          CARGO_TERM_COLOR: always
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          subject-path: src-tauri/target/release/bundle/*
          push-to-registry: false
          show-summary: true
          github-token: ${{ env.GITHUB_TOKEN }}
  
      - name: üìú Create SBOM
        uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "windows_${{ matrix.target }}.sbom.spdx.json"
  
      - name: üõ°Ô∏è Attest SBOM
        uses: actions/attest-sbom@cbfd0027ae731a5892db25ecd226930d7ffd19eb # v2
        with:
          subject-path: 'src-tauri/target/release/codefend-panel.exe'
          sbom-path: "sbom.spdx.json"