name: WindowsBuildAndRelease

on:
  workflow_call:
    inputs:
      release_id:
        required: true
        type: string
      package_version:
        required: true
        type: string
      release_upload_url:
        required: true
        type: string
    outputs:
      windows_x86_64_sig:
        description: "Signature for Windows x86_64 build"
        value: ${{ jobs.windowsBuilding.outputs.windows_x86_64_sig }}
  workflow_dispatch:


jobs:
  windowsBuilding:
    if: "github.event.repository.fork == false"
    name: BuildWindows
    permissions:
      contents: write
      id-token: write
      security-events: write
      attestations: write
    outputs:
      windows_x86_64_sig: ${{ steps.extract-signatures.outputs.windows_x86_64_sig }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
            platform: windows/x86_64

    runs-on: windows-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 🛠️ Setup/ Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🛠️ Setup/ Install pnpm 9.7.0 manually
        run: npm install -g pnpm@9.7.0

      - name: 🛠️ Setup/ Install frontend dependencies
        run: |
          pnpm config set store-dir ~/.pnpm-store
          pnpm install --frozen-lockfile --ignore-scripts

      - name: 🌍 Export GitHub Actions cache environment variables windows
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: 🔧 Install system dependencies
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md
          choco install wget -y
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: 🦀 Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: ✏️ Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/kundalini/index.php" >> .env

      - name: 🔨 Build frontend
        run: pnpm build

      - name: 📥 Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.1.0
          locked: true

      - name: 🔑 Import windows signing certificate
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

          # Importar al almacén de certificados
          $pfxPassword = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pfxPassword
          
          # Verificar la importación
          $cert = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Subject -like "*Codefend*" }
          if (-not $cert) {
            Write-Error "Certificate not found after import"
            exit 1
          }

      - name: 🔨 Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@2a8db2c169af2fdc695133781e27ecba52daea75 # v0.5.17
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          WINDOWS_SIGN_TOOL: "true"
        with:
          releaseId: ${{ inputs.release_id }}
          args: '--verbose'

      - name: 🔏 Sign Windows Executable
        run: |
          $cert = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Subject -like "*Codefend*" }
          if (-not $cert) {
            Write-Error "Certificate not found"
            exit 1
          }
          
          $exePath = "src-tauri\target\release\bundle\nsis\Codefend Security Panel_${{ inputs.package_version }}_x64-setup.exe"
          if (-not (Test-Path $exePath)) {
            Write-Error "Executable not found at: $exePath"
            exit 1
          }
          
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe" sign `
            /tr http://timestamp.sectigo.com `
            /td sha256 `
            /fd sha256 `
            /sha1 $cert.Thumbprint `
            /v `
            "$exePath"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Signing failed"
            exit 1
          }
          
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe" verify /pa "$exePath"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Signature verification failed"
            exit 1
          }

      - name: 📜 Generate SBOM
        uses: microsoft/sbom-tool@v1.5.1
        with:
          path: src-tauri/target/release/bundle
          format: "spdx"
          name: "Codefend Security Panel"
          version: ${{ inputs.package_version }}
          build-commands: pnpm build
          packages-folder: ./node_modules
          output-file: "sbom.spdx.json"

      - name: 🔒 Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: 🔏 Sign SBOM
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign-blob --yes sbom.spdx.json > sbom.spdx.json.sig

      - name: 🛡️ Generate Build Provenance
        uses: philips-labs/slsa-provenance-action@v0.9.0
        with:
          command: generate
          subcommand: github-release
          arguments: --artifact-path src-tauri/target/release/bundle --output-path 'provenance.json' --tag-name ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: 📝 Extract Signatures and Set Outputs
        id: extract-signatures
        run: |
          $package_version = "${{ inputs.package_version }}"
          
          function Read-Signature {
            param([string]$file)
            
            if (-Not (Test-Path $file)) {
              Write-Error "Error: File $file not found"
              exit 1
            }
            
            $signature = Get-Content $file -Raw
            return $signature.Trim()
          }

          $windows_x86_64_sig = Read-Signature "src-tauri\target\release\bundle\nsis\Codefend Security Panel_${package_version}_x64-setup.exe.sig"
          
          Write-Host "Signatures extracted successfully."
          "windows_x86_64_sig=$windows_x86_64_sig" >> $env:GITHUB_OUTPUT

      - name: 📤 Upload Security Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-security-artifacts
          path: |
            sbom.spdx.json
            sbom.spdx.json.sig
            provenance.json