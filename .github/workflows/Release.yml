name: Release

on:
  workflow_call:
  workflow_dispatch:

jobs:
  createRelease:
    if: github.event.repository.fork == false
    name: 🎇 Create Codefend App Release
    runs-on: macos-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      release_id: ${{ steps.create-release.outputs.release_id }}
      package_version: ${{ steps.get-version.outputs.VERSION }}
      release_upload_url: ${{ steps.create-release.outputs.release_upload_url }}

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup/ Node.js use 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🏷️ Get Release Version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
      - name: 🚀 Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = `codefend-v${{ steps.get-version.outputs.VERSION }}`;
            try {
              const { data } = await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tag,
                name: `Codefend v${{ steps.get-version.outputs.VERSION }}`,
                body: "What's new? 🎉📣",
                draft: true,
                prerelease: false
              });
              core.setOutput('release_id', data.id);
              core.setOutput('release_upload_url', data.upload_url);
            } catch (e) {
              if (e.status === 422) {
                // Release with this tag already exists – reuse it
                const { data } = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
                core.setOutput('release_id', data.id);
                core.setOutput('release_upload_url', data.upload_url);
              } else {
                throw e;
              }
            }

  build_linux:
    needs: [createRelease]
    uses: ./.github/workflows/PublishLinuxOS.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
    secrets: inherit

  build_macos:
    needs: [createRelease]
    uses: ./.github/workflows/PublishMacOs.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
      release_upload_url: ${{ needs.createRelease.outputs.release_upload_url }}
    secrets: inherit


  build_windows:
    needs: [createRelease]
    uses: ./.github/workflows/PublishWindowOS.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
      release_upload_url: ${{ needs.createRelease.outputs.release_upload_url }}
    secrets: inherit

  release_github:
    needs: [createRelease, build_linux, build_macos, build_windows]
    name: 🎆 Release Github
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup/ Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📜 Create Update Manifest from Release Assets
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const version = '${{ needs.createRelease.outputs.package_version }}';
            const tag = `codefend-v${version}`;
            const releaseId = ${{ needs.createRelease.outputs.release_id }};

            // Use release ID to support draft releases (getReleaseByTag returns 404 for drafts)
            const { data: release } = await github.rest.repos.getRelease({ owner, repo, release_id: releaseId });
            const assets = release.assets || [];

            const find = (re) => assets.find(a => re.test(a.name));
            const urlOf = (asset) => `https://github.com/${owner}/${repo}/releases/download/${tag}/${asset.name}`;
            const sigContent = async (asset) => {
              const res = await github.request('GET ' + asset.url, { headers: { accept: 'application/octet-stream' } });
              return Buffer.from(res.data).toString('utf8').trim();
            };

            // Match assets by extension and arch hints in the name
            const win = find(/x64-setup\.exe$/i);
            const winSig = find(/x64-setup\.exe\.sig$/i);

            const lin = find(/(amd64|x86_64)\.(AppImage|deb|rpm|tar\.gz)$/i);
            const linSig = find(/(amd64|x86_64)\.(AppImage|deb|rpm|tar\.gz)\.sig$/i);

            const macArm = find(/(aarch64|arm64).*\.(dmg|tar\.gz)$/i);
            const macArmSig = find(/(aarch64|arm64).*\.(dmg|tar\.gz)\.sig$/i);
            const macX64 = find(/(x86_64|x64).*\.(dmg|tar\.gz)$/i);
            const macX64Sig = find(/(x86_64|x64).*\.(dmg|tar\.gz)\.sig$/i);

            const latest = {
              version,
              notes: `Codefend Panel ${version} release`,
              pub_date: new Date().toISOString(),
              platforms: {}
            };

            if (macArm && macArmSig) {
              latest.platforms['darwin-aarch64'] = {
                signature: await sigContent(macArmSig),
                url: urlOf(macArm)
              };
            }
            if (macX64 && macX64Sig) {
              latest.platforms['darwin-x86_64'] = {
                signature: await sigContent(macX64Sig),
                url: urlOf(macX64)
              };
            }
            if (lin && linSig) {
              latest.platforms['linux-x86_64'] = {
                signature: await sigContent(linSig),
                url: urlOf(lin)
              };
            }
            if (win && winSig) {
              latest.platforms['windows-x86_64'] = {
                signature: await sigContent(winSig),
                url: urlOf(win)
              };
            }

            if (!Object.keys(latest.platforms).length) {
              core.setFailed('No platforms found to include in latest.json');
              return;
            }

            const fs = require('fs');
            fs.writeFileSync('latest.json', JSON.stringify(latest, null, 2));
            core.info('latest.json generated from release assets');

      - name: 📤 Commit and Push to a new branch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git fetch origin
          git push origin --delete update-latest-json || true
          git checkout -b update-latest-json
          git add latest.json
          git commit -m "Update latest.json"
          git push -u origin update-latest-json --force

      - name: 🛒 Publish release
        id: publish-release
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = `codefend-v${{ needs.createRelease.outputs.package_version }}`;
            const releaseId = ${{ needs.createRelease.outputs.release_id }};
            try {
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: releaseId,
                draft: false,
                prerelease: false
              });
            } catch (e) {
              if (e.status === 422) {
                // Fallback: find by tag and publish
                const { data } = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
                await github.rest.repos.updateRelease({
                  owner,
                  repo,
                  release_id: data.id,
                  draft: false,
                  prerelease: false
                });
              } else {
                throw e;
              }
            }
