name: Release

on:
  workflow_call:
  workflow_dispatch:

jobs:
  createRelease:
    if: "github.event.repository.fork == false"
    name: Create Codefend App Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      release_id: ${{ steps.create-release.outputs.release_id }}
      package_version: ${{ steps.get-version.outputs.VERSION }}
      release_upload_url: ${{ steps.create-release.outputs.release_upload_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get Release Version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `codefend-v${{ steps.get-version.outputs.VERSION }}`,
              name: `Codefend v${{ steps.get-version.outputs.VERSION }}`,
              body: 'Release build for Codefend v${{ steps.get-version.outputs.VERSION }}',
              draft: true,
              prerelease: false
            });
            core.setOutput('release_id', data.id);
            core.setOutput('release_upload_url', data.upload_url);

  build_linux:
    needs: [createRelease]
    uses: ./.github/workflows/PublishLinuxOS.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
    secrets: inherit

  build_macos:
    needs: [createRelease]
    uses: ./.github/workflows/PublishMacOs.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
    secrets: inherit


  build_windows:
    needs: [createRelease]
    uses: ./.github/workflows/PublishWindowOS.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
    secrets: inherit

  release_github:
    needs: [createRelease, build_linux, build_macos, build_windows]
    name: Release Github
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Use Linux Signature
        run: |
          echo "Linux signature: ${{ needs.build_linux.outputs.linux_x86_64_sig }}"

      - name: Create Update Manifest Script
        run: |
          package_version="${{ needs.createRelease.outputs.package_version }}"
          pub_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          read_signature() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              echo "Error: File $file not found" >&2
              exit 1
            fi
            tr -d '\n' < "$file" | xargs
          }

          cat > latest.json << EOL
          {
            "version": "${package_version}",
            "notes": "Codefend Panel ${package_version} release",
            "pub_date": "${pub_date}",
            "platforms": {
              "darwin-aarch64": {
                "signature": "${{ needs.build_macos.outputs.macos_aarch64_sig }}",
                "url": "https://github.com/codefen/codefend-user/releases/download/v${package_version}/codefend-panel_${package_version}_aarch64.dmg"
              },
              "darwin-x86_64": {
                "signature": "${{ needs.build_macos.outputs.macos_x86_64_sig }}",
                "url": "https://github.com/codefen/codefend-user/releases/download/v${package_version}/codefend-panel_${package_version}_x64.dmg"
              },
              "linux-x86_64": {
                "signature": "${{ needs.build_linux.outputs.linux_x86_64_sig }}",
                "url": "https://github.com/codefen/codefend-user/releases/download/v${package_version}/codefend-panel_${package_version}_amd64.deb"
              },
              "windows-x86_64": {
                "signature": "${{ needs.build_windows.outputs.windows_x86_64_sig }}",
                "url": "https://github.com/codefen/codefend-user/releases/download/v${package_version}/codefend-panel_${package_version}_x64_en-US.msi"
              }
            }
          }
          EOL

          echo "Update manifest generated successfully:"
          cat latest.json

      - name: Commit and Push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add latest.json
          git commit -m "Update latest.json"
          git push

      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.createRelease.outputs.release_id }},
              draft: false,
              prerelease: false
            })