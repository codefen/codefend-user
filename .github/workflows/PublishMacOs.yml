name: MacOsBuildAndRelease

on:
  workflow_call:
    inputs:
      release_id:
        required: true
        type: string
      package_version:
        required: true
        type: string
      release_upload_url:
        required: true
        type: string
    outputs:
      macos_x86_64_sig:
        description: "Signature for Macos x86_64 build"
        value: ${{ jobs.macosBuilding.outputs.macos_x86_64_sig }}
      macos_aarch64_sig:
        description: "Signature for Macos aarch64 build"
        value: ${{ jobs.macosBuilding.outputs.macos_aarch64_sig }}
      macos_x86_64_name:
        description: "Name for Macos x86_64 build"
        value: ${{ jobs.macosBuilding.outputs.macos_x86_64_name }}
      macos_aarch64_name:
        description: "Name for Macos aarch64 build"
        value: ${{ jobs.macosBuilding.outputs.macos_aarch64_name }}
  workflow_dispatch:


jobs:
  macosBuilding:
    if: "github.event.repository.fork == false"
    name: BuildMacOs
    permissions:
      contents: write
      id-token: write
      security-events: write
      attestations: write
    outputs:
      macos_x86_64_sig: ${{ steps.extract-signatures.outputs.macos_x86_64_sig }}
      macos_aarch64_sig: ${{ steps.extract-signatures.outputs.macos_aarch64_sig }}
      macos_x86_64_name: ${{ steps.extract-signatures.outputs.macos_x86_64_name }}
      macos_aarch64_name: ${{ steps.extract-signatures.outputs.macos_aarch64_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            arch: x64
            platform: darwin/x86_64
          - target: aarch64-apple-darwin
            arch: arm64
            platform: darwin/arm64

    runs-on: macos-latest
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Setup/ Node USE 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üõ†Ô∏è Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üõ†Ô∏è Install dependencies
        run: bun install

      - name: ü¶Ä Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown'

      - name: ‚úèÔ∏è Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/index.php" >> .env
          echo "VITE_NODE_ENV=production" >> .env
          echo "VITE_STRIPE_KEY_LIVE=${{ secrets.STRIPE_KEY }}" >> .env
          echo "VITE_STRIPE_KEY_TEST=${{ secrets.STRIPE_KEY_TEST }}" >> .env

      - name: üî® Run build client
        run: bun run build

      - name: üì• Cached install leptosfmt
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: leptosfmt@0.1.32
          locked: true

      - name: üìê Run leptosfmt and fail if any warnings
        run: |
          leptosfmt --check src

      - name: üìê Run rustfmt and fail if any warnings
        working-directory: ./src-tauri
        run: |
          cargo fmt -- --check

      - name: üìé Run clippy and fail if any warnings
        working-directory: ./src-tauri
        run: |
          cargo clippy -- -D warnings

      - name: üì• Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.1.0
          locked: true

      - name: üî® Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@2a8db2c169af2fdc695133781e27ecba52daea75 # v0.5.17
        env:
          RUSTFLAGS: "-D warnings"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_BUNDLE_IDENTIFIER: "com.codefend.app"
          TAURI_BUNDLE_VERSION: ${{ inputs.package_version }}
        with:
          releaseId: ${{ inputs.release_id }}
          args: '--verbose --target ${{ matrix.target }}'

      - name: üìù Extract Signatures and Set Outputs
        id: extract-signatures
        run: |
          package_version="${{ inputs.package_version }}"
          target="${{ matrix.target }}"

          read_signature() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Error: Signature file not found: $file" >&2
              exit 1
            fi
            tr -d '\n' < "$file" | xargs
          }

          # Buscar el archivo .app.tar.gz.sig din√°micamente
          sig_path=$(find "src-tauri/target/${target}/release/bundle/macos" -type f -name "*.app.tar.gz.sig" | head -n 1)

          if [[ -z "$sig_path" ]]; then
            echo "‚ùå Could not find signature file for macOS .app.tar.gz" >&2
            exit 1
          fi

          echo "‚úÖ Found signature file: $sig_path"
          artifact_path="${sig_path%.sig}"
          artifact_name=$(basename "$artifact_path")

          if [[ "$target" == *"x86_64"* ]]; then
            macos_x86_64_sig=$(read_signature "$sig_path")
            echo "macos_x86_64_sig=$macos_x86_64_sig" >> $GITHUB_OUTPUT
            echo "macos__x86_64_name=$artifact_name" >> $GITHUB_OUTPUT
          else
            macos_aarch64_sig=$(read_signature "$sig_path")
            echo "macos_aarch64_sig=$macos_aarch64_sig" >> $GITHUB_OUTPUT
            echo "macos_aarch64_name=$artifact_name" >> $GITHUB_OUTPUT
          fi

          echo "‚úÖ Signature extracted successfully."

      - name: üß† Set subject path
        id: set-subject-path
        run: |
          if [[ "${{ matrix.target }}" == *"x86_64"* ]]; then
            echo "subject_path=src-tauri/target/x86_64-apple-darwin/release/bundle/macos/${{ steps.extract-signatures.outputs.macos_x86_64_name }}" >> $GITHUB_OUTPUT
          else
            echo "subject_path=src-tauri/target/aarch64-apple-darwin/release/bundle/macos/${{ steps.extract-signatures.outputs.macos_aarch64_name }}" >> $GITHUB_OUTPUT
          fi

      - name: üõ°Ô∏è Attest build provenance (publish release only)
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        env:
          CARGO_HOME: /home/runner/.cargo
          CARGO_INCREMENTAL: 0
          CARGO_TERM_COLOR: always
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          subject-path: ${{ steps.set-subject-path.outputs.subject_path }}
          push-to-registry: false
          show-summary: true
          github-token: ${{ env.GITHUB_TOKEN }}
  
      - name: üìú Create SBOM
        uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "macos_${{ matrix.target }}.sbom.spdx.json"

      - name: üõ°Ô∏è Attest SBOM
        uses: actions/attest-sbom@cbfd0027ae731a5892db25ecd226930d7ffd19eb # v2
        with:
          subject-path: ${{ steps.set-subject-path.outputs.subject_path }}
          sbom-path: "sbom.spdx.json"

      - name: üßπ Secure cleanup
        if: always()
        run: |
          # Limpiar keychain temporal si existe
          if [[ -n "${KEYCHAIN_PATH:-}" ]]; then
            security delete-keychain "$KEYCHAIN_PATH" || true
            echo "Temporary keychain cleaned up"
          fi
          
          # Limpiar provisioning profiles
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/app.mobileprovision || true