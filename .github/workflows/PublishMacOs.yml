name: MacOsBuildAndRelease

on:
  workflow_call:
    inputs:
      release_id:
        required: true
        type: string
      package_version:
        required: true
        type: string
      release_upload_url:
        required: true
        type: string
    outputs:
      macos_x86_64_sig:
        description: "Signature for Macos x86_64 build"
        value: ${{ jobs.macosBuilding.outputs.macos_x86_64_sig }}
      macos_aarch64_sig:
        description: "Signature for Macos aarch64 build"
        value: ${{ jobs.macosBuilding.outputs.macos_aarch64_sig }}

jobs:
  macosBuilding:
    if: "github.event.repository.fork == false"
    name: BuildMacOs
    permissions:
      contents: write
      id-token: write
      security-events: write
      attestations: write
    outputs:
      macos_x86_64_sig: ${{ steps.extract-signatures.outputs.macos_x86_64_sig }}
      macos_aarch64_sig: ${{ steps.extract-signatures.outputs.macos_aarch64_sig }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            arch: x64
            platform: darwin/x86_64
          - target: aarch64-apple-darwin
            arch: arm64
            platform: darwin/arm64

    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup/ Install pnpm 9.7.0 manually
        run: npm install -g pnpm@9.7.0

      - name: Install frontend dependencies
        run: |
          pnpm config set store-dir ~/.pnpm-store
          pnpm install --frozen-lockfile --ignore-scripts

      - name: 🦀 Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown'

      - name: Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/kundalini/index.php" >> .env

      - name: Build frontend
        run: pnpm build

      - name: 📥 Cached install leptosfmt
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: leptosfmt@0.1.32
          locked: true

      - name: 📐 Run leptosfmt and fail if any warnings
        run: |
          leptosfmt --check src

      - name: 📐 Run rustfmt and fail if any warnings
        working-directory: ./src-tauri
        run: |
          cargo fmt -- --check

      - name: 📎 Run clippy and fail if any warnings
        working-directory: ./src-tauri
        run: |
          cargo clippy -- -D warnings

      - name: 📥 Cached install cargo-auditable
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: cargo-auditable@0.6.6
          locked: true

      - name: 📥 Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.1.0
          locked: true

      - name: 🔨 Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@2a8db2c169af2fdc695133781e27ecba52daea75 # v0.5.17
        env:
          RUSTFLAGS: "-D warnings"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ inputs.release_id }}
          tauriScript: cargo --locked auditable tauri
          args: '--verbose --target ${{ matrix.target }}'

      - name: Upload Release Assets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const artifacts = [
              'src-tauri/target/${{ matix.target }}/release/bundle/macos/codefend-panel.app',
              'src-tauri/target/${{ matix.target }}/release/bundle/macos/codefend-panel.app.tar.gz',
              'src-tauri/target/${{ matix.target }}/release/bundle/macos/codefend-panel.app.tar.gz.sig'
            ];

            const releaseId = ${{ inputs.release_id }};
            for (const artifact of artifacts) {
              if (fs.existsSync(artifact) && fs.lstatSync(artifact).isFile()) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId,
                  name: path.basename(artifact),
                  data: fs.readFileSync(artifact)
                });
              }
            }

      - name: Extract Signatures and Set Outputs - MacOs
        id: extract-signatures
        run: |
          package_version="${{ inputs.package_version }}"

          read_signature() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              echo "Error: File $file not found" >&2
              exit 1
            fi
            tr -d '\n' < "$file" | xargs
          }

          if [[ "${{ contains(matrix.target, 'x86_64') }}" == "true" ]]; then
            macos_x86_64_sig=$(read_signature "src-tauri/target/${{ matrix.target }}/release/bundle/macos/codefend-panel.app.tar.gz.sig")
            echo "macos_x86_64_sig=$macos_x86_64_sig" >> $GITHUB_OUTPUT
          else
            macos_aarch64_sig=$(read_signature "src-tauri/target/${{ matrix.target }}/release/bundle/macos/codefend-panel.app.tar.gz.sig")
            echo "macos_aarch64_sig=$macos_aarch64_sig" >> $GITHUB_OUTPUT
          fi

          echo "Signatures extracted successfully."

      - name: 🛡️ Attest build provenance (publish release only)
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        env:
          CARGO_HOME: /home/runner/.cargo
          CARGO_INCREMENTAL: 0
          CARGO_TERM_COLOR: always
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          subject-path: src-tauri/target/**/release/bundle/macos/*.tar.gz*
          push-to-registry: false
          show-summary: true
          github-token: ${{ env.GITHUB_TOKEN }}
  
      - name: 📜 Create SBOM
        uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "macos_${{ matrix.target }}.sbom.spdx.json"
  
      - name: 🛡️ Attest SBOM
        uses: actions/attest-sbom@cbfd0027ae731a5892db25ecd226930d7ffd19eb # v2
        with:
          subject-path: >-
            ${{ 
              (contains(matrix.target, 'x86_64')) && 'src-tauri/target/x86_64-apple-darwin/release/codefend-panel' ||
              (contains(matrix.target, 'aarch64')) && 'src-tauri/target/aarch64-apple-darwin/release/codefend-panel'
            }}
          sbom-path: "sbom.spdx.json"