name: Release

on:
  workflow_call:

jobs:
  createRelease:
    if: "startsWith(github.ref, 'refs/tags/') && github.event.repository.fork == false"
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      package_version: ${{ steps.get-version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v4

      - name: Get Release Version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          core.setOutput('package_version', $VERSION);

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `codefend-v${{ steps.get-version.outputs.VERSION }}`,
              name: `Codefend v${{ steps.get-version.outputs.VERSION }}`,
              body: 'Release build for Codefend v${{ steps.get-version.outputs.VERSION }}',
              draft: true,
              prerelease: false
            })
            core.setOutput('release_id', data.id);

  build_linux:
    needs: [createRelease]
    uses: ./.github/workflows/PublishLinuxOS.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
    secrets: inherit

  build_macos:
    needs: [createRelease]
    uses: ./.github/workflows/PublishMacOs.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
    secrets: inherit

  build_windows:
    needs: [createRelease]
    uses: ./.github/workflows/PublishWindowOS.yml
    with:
      release_id: ${{ needs.createRelease.outputs.release_id }}
      package_version: ${{ needs.createRelease.outputs.package_version }}
    secrets: inherit

  release_github:
    needs: [build_linux, build_macos, build_windows]
    name: Release Github
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 3. Generar el archivo latest.json
      - name: Generate latest.json
        id: generate-latest
        run: |
          VERSION="v${{ needs.createRelease.outputs.release_id }}" # Generar versión dinámica
          echo "{
            \"version\": \"$VERSION\",
            \"notes\": \"Release notes for $VERSION\",
            \"pub_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
            \"platforms\": {
              \"linux-x86_64\": {
                \"url\": \"https://github.com/codefen/codefend-user/releases/download/$VERSION/linux-x86_64.AppImage\",
                \"signature\": \"$(cat ./artifacts/linux/x86_64/build.sig)\"
              },
              \"macos-universal\": {
                \"url\": \"https://github.com/codefen/codefend-user/releases/download/$VERSION/macos-universal.dmg\",
                \"signature\": \"$(cat ./artifacts/macos/universal/build.sig)\"
              },
              \"windows-x64\": {
                \"url\": \"https://github.com/codefen/codefend-user/releases/download/$VERSION/windows-x64.exe\",
                \"signature\": \"$(cat ./artifacts/windows/x64/build.sig)\"
              }
            }
          }" > ./latest.json

      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.release.outputs.release_id }},
              draft: false,
              prerelease: false
            })

      - name: 🛡️ Attest build provenance (publish release only)
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        with:
          subject-path: |
            src-tauri/target/release/bundle/nsis/*
            src-tauri/target/**/release/bundle/macos/*.tar.gz*
            src-tauri/target/**/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
          push-to-registry: false
          show-summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          CARGO_HOME: /home/runner/.cargo
          CARGO_INCREMENTAL: 0
          CARGO_TERM_COLOR: always
          
      - name: 📜 Create SBOM
        uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "${{ matrix.platform }}${{ matrix.args }}.sbom.spdx.json"

      - name: 🛡️ Attest SBOM
        uses: actions/attest-sbom@cbfd0027ae731a5892db25ecd226930d7ffd19eb # v2
        with:
          subject-path: >-
            ${{ 
              contains(matrix.platform, 'ubuntu') && 'src-tauri/target/x86_64-unknown-linux-gnu/release/codefend-panel' ||
              contains(matrix.platform, 'windows') && 'src-tauri/target/x86_64-pc-windows-msvc/release/codefend-panel.exe' ||
              (contains(matrix.platform, 'macos') && contains(matrix.args, 'x86_64')) && 'src-tauri/target/x86_64-apple-darwin/release/codefend-panel' ||
              (contains(matrix.platform, 'macos') && contains(matrix.args, 'aarch64')) && 'src-tauri/target/aarch64-apple-darwin/release/codefend-panel'
            }}
          sbom-path: "sbom.spdx.json"