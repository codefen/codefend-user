name: LinuxBuildAndRelease

on:
  workflow_call:
    inputs:
      release_id:
        required: true
        type: string
      package_version:
        required: true
        type: string
    outputs:
      linux_x86_64_sig:
        description: "Signature for Linux x86_64 build"
        value: ${{ jobs.linuxBuilding.outputs.linux_x86_64_sig }}
  workflow_dispatch:


jobs:
  linuxBuilding:
    if: "github.event.repository.fork == false"
    name: BuildLinux
    permissions:
      contents: write
      id-token: write
      security-events: write
      attestations: write
    outputs:
      linux_x86_64_sig: ${{ steps.extract-signatures.outputs.linux_x86_64_sig }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            platform: linux/amd64
            symbol: üêß

    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üõ†Ô∏è Setup/ Install pnpm 9.7.0 manually
        run: npm install -g pnpm@9.7.0

      - name: üì¶ Install frontend dependencies
        run: |
          pnpm config set store-dir ~/.pnpm-store
          pnpm install --frozen-lockfile --ignore-scripts
          
      - name: üîß Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            pkg-config

      - name: ü¶Ä Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: ‚úèÔ∏è Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/kundalini/index.php" >> .env
          
      - name: üî® Build frontend
        run: pnpm build

      - name: üì• Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.1.0
          locked: true

      - name: üî® Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@2a8db2c169af2fdc695133781e27ecba52daea75 # v0.5.17
        env:
          RUSTFLAGS: "-D warnings"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ inputs.release_id }}
          args: '--verbose'

      - name: üì§ Upload Release Assets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const artifacts = [
              'src-tauri/target/release/bundle/appimage/Codefend Security Panel_${{ inputs.package_version }}_amd64.AppImage'
            ];
            for (const artifact of artifacts) {
              if (fs.existsSync(artifact) && fs.lstatSync(artifact).isFile()) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ inputs.release_id }},
                  name: `linux-${path.basename(artifact)}`,
                  data: fs.readFileSync(artifact)
                });
              }
            }

      - name: üìù Extract Signatures and Set Outputs
        id: extract-signatures
        run: |
          package_version="${{ inputs.package_version }}"

          read_signature() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              echo "Error: File $file not found" >&2
              exit 1
            fi
            tr -d '\n' < "$file" | xargs
          }

          linux_x86_64_sig=$(read_signature "src-tauri/target/release/bundle/appimage/Codefend Security Panel_${package_version}_amd64.AppImage.sig")

          echo "Signatures extracted successfully."
          echo "linux_x86_64_sig=$linux_x86_64_sig" >> $GITHUB_OUTPUT

      - name: üìú Generate SBOM
        uses: anchore/sbom-action@v0.17.9
        with:
          path: src-tauri/target/release/bundle
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "linux_${{ matrix.target }}.sbom.spdx.json"

      - name: üîí Sign SBOM
        uses: sigstore/cosign-installer@v3.7.0
        
      - name: üîè Sign SBOM with Cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign-blob --yes sbom.spdx.json > sbom.spdx.json.sig

      - name: üõ°Ô∏è Generate Build Provenance
        uses: philips-labs/slsa-provenance-action@v0.9.0
        with:
          command: generate
          subcommand: github-release
          arguments: --artifact-path src-tauri/target/release/bundle --output-path 'provenance.json' --tag-name ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: üì§ Upload SBOM and Provenance
        uses: actions/upload-artifact@v3
        with:
          name: linux-security-artifacts
          path: |
            sbom.spdx.json
            sbom.spdx.json.sig
            provenance.json

