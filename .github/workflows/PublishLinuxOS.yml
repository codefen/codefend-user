name: LinuxBuildAndRelease

on:
  workflow_call:
    inputs:
      release_id:
        required: true
        type: string
      package_version:
        required: true
        type: string
    outputs:
      linux_x86_64_sig:
        description: "Signature for Linux x86_64 build"
        value: ${{ jobs.linuxBuilding.outputs.linux_x86_64_sig }}
      linux_x86_64_name:
        description: "Name for Linux x86_64 build"
        value: ${{ jobs.linuxBuilding.outputs.linux_x86_64_name }}
  workflow_dispatch:


jobs:
  linuxBuilding:
    if: "github.event.repository.fork == false"
    name: BuildLinux
    permissions:
      contents: write
      id-token: write
      security-events: write
      attestations: write
    outputs:
      linux_x86_64_sig: ${{ steps.extract-signatures.outputs.linux_x86_64_sig }}
      linux_x86_64_name: ${{ steps.extract-signatures.outputs.linux_x86_64_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            platform: linux/amd64
            symbol: üêß

    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üõ†Ô∏è Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üõ†Ô∏è Install dependencies
        run: bun install
          
      - name: üåç Export GitHub Actions cache environment variables
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: üîß Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            pkg-config

      - name: ü¶Ä Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: ‚úèÔ∏è Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/index.php" >> .env
          echo "VITE_NODE_ENV=production" >> .env
          echo "VITE_STRIPE_KEY_LIVE=${{ secrets.STRIPE_KEY }}" >> .env
          echo "VITE_STRIPE_KEY_TEST=${{ secrets.STRIPE_KEY_TEST }}" >> .env
          
      - name: üî® Run build client
        run: bun run build

      - name: üì• Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.1.0
          locked: true

      - name: üî® Build using tauri action (publish artifacts on release)
        uses: tauri-apps/tauri-action@2a8db2c169af2fdc695133781e27ecba52daea75 # v0.5.17
        env:
          RUSTFLAGS: "-D warnings"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_BUNDLE_IDENTIFIER: "com.codefend.app"
          TAURI_BUNDLE_VERSION: ${{ inputs.package_version }}
        with:
          releaseId: ${{ inputs.release_id }}
          args: '--verbose'

      - name: üîç Verify build artifacts
        run: |
          package_version="${{ inputs.package_version }}"
          
          echo "=== Build Artifacts Verification ==="
          
          # Verificar AppImage
          appimage_path=$(find src-tauri/target/release/bundle/appimage -type f -name "*_${package_version}_amd64.AppImage" | head -n 1)

          if [[ -z "$appimage_path" ]]; then
            echo "‚ùå AppImage not found for version $package_version"
            exit 1
          fi
          if [[ -f "$appimage_path" ]]; then
            echo "‚úÖ AppImage found: $appimage_path"
            echo "   Size: $(du -h "$appimage_path" | cut -f1)"
            echo "   Permissions: $(ls -la "$appimage_path" | cut -d' ' -f1)"
          fi
          
          # Verificar firma
          sig_path="${appimage_path}.sig"
          if [[ -f "$sig_path" ]]; then
            echo "‚úÖ Signature found: $sig_path"
            echo "   Content preview: $(head -c 100 "$sig_path")"
          else
            echo "‚ùå Signature not found: $sig_path"
            exit 1
          fi
          
          # Verificar DEB si existe
          deb_path="src-tauri/target/release/bundle/deb/codefend-panel_${package_version}_amd64.deb"
          if [[ -f "$deb_path" ]]; then
            echo "‚úÖ DEB package found: $deb_path"
            echo "   Size: $(du -h "$deb_path" | cut -f1)"
          fi
          
          # Verificar RPM si existe  
          rpm_path="src-tauri/target/release/bundle/rpm/codefend-panel-${package_version}-1.x86_64.rpm"
          if [[ -f "$rpm_path" ]]; then
            echo "‚úÖ RPM package found: $rpm_path"
            echo "   Size: $(du -h "$rpm_path" | cut -f1)"
          fi
          
          echo "===================================="

      - name: üìù Extract Signatures and Set Outputs
        id: extract-signatures
        run: |
          package_version="${{ inputs.package_version }}"

          # Buscar el archivo .sig correspondiente al AppImage generado
          sig_file=$(find src-tauri/target/release/bundle/appimage -type f -name "*_${package_version}_amd64.AppImage.sig" | head -n 1)

          if [[ -z "$sig_file" ]]; then
            echo "‚ùå Signature file not found for version $package_version" >&2
            exit 1
          fi

          read_signature() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              echo "Error: File $file not found" >&2
              exit 1
            fi

            # Leer y limpiar la firma
            local sig_content=$(tr -d '\n' < "$file" | xargs)

            if [[ -z "$sig_content" ]]; then
              echo "Error: Signature file $file is empty" >&2
              exit 1
            fi

            echo "$sig_content"
          }

          linux_x86_64_sig=$(read_signature "$sig_file")

          echo "Signatures extracted successfully."
          echo "linux_x86_64_sig=$linux_x86_64_sig" >> $GITHUB_OUTPUT

          appimage_path="${sig_file%.sig}"
          appimage_name=$(basename "$appimage_path")
          echo "linux_x86_64_name=$appimage_name" >> $GITHUB_OUTPUT

          echo "‚úÖ Signatures and artifact name extracted successfully."

          # Debug info
          echo "=== Signature Info ==="
          echo "Signature path: $sig_file"
          echo "Signature length: ${#linux_x86_64_sig}"
          echo "Signature preview: ${linux_x86_64_sig:0:50}..."
          echo "======================"

      # - name: üõ°Ô∏è Attest build provenance (publish release only)
      #   uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
      #   env:
      #     CARGO_HOME: /home/runner/.cargo
      #     CARGO_INCREMENTAL: 0
      #     CARGO_TERM_COLOR: always
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     subject-path: src-tauri/target/release/bundle/*
      #     push-to-registry: false
      #     show-summary: true
      #     github-token: ${{ env.GITHUB_TOKEN }}
  
      # - name: üìú Create SBOM
      #   uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
      #   with:
      #     format: "spdx-json"
      #     output-file: "sbom.spdx.json"
      #     artifact-name: "linux_${{ matrix.target }}.sbom.spdx.json"
  
      # - name: üõ°Ô∏è Attest SBOM
      #   uses: actions/attest-sbom@v2
      #   with:
      #     subject-path: 'src-tauri/target/release/codefend-panel'
      #     sbom-path: "sbom.spdx.json"

      - name: üõ°Ô∏è Attest build provenance
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        with:
          subject-path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
          push-to-registry: false
          show-summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: üìú Create SBOM
        uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "linux_${{ matrix.target }}.sbom.spdx.json"
  
      - name: üõ°Ô∏è Attest SBOM
        uses: actions/attest-sbom@cbfd0027ae731a5892db25ecd226930d7ffd19eb # v2
        with:
          subject-path: "src-tauri/target/release/bundle/appimage/${{ steps.extract-signatures.outputs.linux_x86_64_name }}"
          sbom-path: "sbom.spdx.json"

      - name: üîê Final security verification
        run: |
          package_version="${{ inputs.package_version }}"
          appimage_path=$(find src-tauri/target/release/bundle/appimage -type f -name "*_${package_version}_amd64.AppImage" | head -n 1)

          if [[ -z "$appimage_path" ]]; then
            echo "‚ùå AppImage not found for version $package_version"
            exit 1
          fi
          if [[ -x "$appimage_path" ]]; then
            echo "‚úÖ AppImage is executable"
          fi
          
          # Verificar que no contiene informaci√≥n sensible
          if strings "$appimage_path" | grep -i "password\|secret\|key" | grep -v "password_hash\|public_key"; then
            echo "‚ö†Ô∏è  Warning: Potential sensitive information found in binary"
          else
            echo "‚úÖ No obvious sensitive information found"
          fi
          
          # Verificar firma Tauri
          sig_path="${appimage_path}.sig"
          if [[ -f "$sig_path" && -s "$sig_path" ]]; then
            echo "‚úÖ Tauri signature is present and non-empty"
          else
            echo "‚ùå Tauri signature is missing or empty"
            exit 1
          fi
          
          echo "=============================="