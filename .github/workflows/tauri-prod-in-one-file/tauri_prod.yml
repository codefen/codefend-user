
name: 'Publish App'

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  workflow_call:

jobs:
#  test:
#    uses: ./.github/workflows/TestCI.yml
#    secrets: inherit

  release:
    name: Create Release
#    needs: [test]
    if: "github.event.repository.fork == false"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      release_id: ${{ steps.create-release.outputs.release_id }}
      package_version: ${{ steps.get-version.outputs.VERSION }}
      release_upload_url: ${{ steps.create-release.outputs.release_upload_url }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get Release Version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `codefend-v${{ steps.get-version.outputs.VERSION }}`,
              name: `Codefend v${{ steps.get-version.outputs.VERSION }}`,
              body: 'Release build for Codefend v${{ steps.get-version.outputs.VERSION }}',
              draft: true,
              prerelease: false
            });
            core.setOutput('release_id', data.id);
            core.setOutput('release_upload_url', data.upload_url);

  buildAndPublish:
    name: Build and Publish
    needs: [release]
    if: "github.event.repository.fork == false"
    permissions:
      contents: write
      id-token: write
      security-events: write
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: "--target aarch64-apple-darwin"
            arch: aarch64-apple-darwin
            symbol: 🍏
          - platform: 'macos-latest'
            args: "--target x86_64-apple-darwin"
            arch: x86_64-apple-darwin
            symbol: 🍎
          - platform: 'ubuntu-latest'
            arch: x86_64-unknown-linux-gnu
            args: "--target x86_64-unknown-linux-gnu"
            symbol: 🐧
            install: |
              sudo apt-get update
              sudo apt-get install -y \
                libgtk-3-dev \
                libwebkit2gtk-4.1-dev \
                libappindicator3-dev \
                librsvg2-dev \
                patchelf \
                libsoup-3.0-dev \
                libjavascriptcoregtk-4.1-dev \
                pkg-config

          - platform: 'windows-latest'
            args: "--target x86_64-pc-windows-msvc"
            arch: x86_64-pc-windows-msvc
            symbol: ✈️
            install: |
              echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
              vcpkg install openssl:x64-windows-static-md
              choco install wget -y
    outputs:
      windows_x86_64_sig: ${{ steps.extractwindows-signatures.outputs.windows_x86_64_sig }}
      darwin_aarch64_sig: ${{ steps.extractmacaarch-signatures.outputs.darwin_aarch64_sig }}
      darwin_x86_64_sig: ${{ steps.extractmacx86-signatures.outputs.darwin_x86_64_sig }}
      linux_x86_64_sig: ${{ steps.extractlinux-signatures.outputs.linux_x86_64_sig }}
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get Release Version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup/ Install pnpm 9.7.0 manually
        run: npm install -g pnpm@9.7.0

      - name: Install frontend dependencies
        run: |
          pnpm config set store-dir ~/.pnpm-store
          pnpm install --frozen-lockfile --ignore-scripts
        
      - name: 🦀 Install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown' || 'wasm32-unknown-unknown' }}

      - name: 🌍 Export GitHub Actions cache environment variables windows
        if: contains(matrix.platform, 'windows')
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: 🔑 Import windows signing certificate
        if: contains(matrix.platform, 'windows')
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      - name: 🛠️ Setup | Install dependencies
        if: matrix.install != ''
        run: ${{ matrix.install }}
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: Create env file
        run: |
          echo "VITE_PORT=5173" >> .env
          echo "TAURI_PLATFORM=${{ matrix.platform }}" >> .env
          echo "VITE_API_URI=https://api.codefend.com/kundalini/index.php" >> .env
          
      - name: Build frontend
        run: pnpm build
        
#      - name: 📥 Cached install leptosfmt (macos only)
#        if: contains(matrix.platform, 'macos')
#        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
#        with:
#          tool: leptosfmt@0.1.32
#          locked: true
#      - name: 📐 Run leptosfmt and fail if any warnings (macos only)
#        if: contains(matrix.platform, 'macos')
#        run: |
#          leptosfmt --check src
#      - name: 📐 Run rustfmt and fail if any warnings (macos only)
#        if: contains(matrix.platform, 'macos')
#        working-directory: ./src-tauri
#        run: |
#          cargo fmt -- --check
#      - name: 📎 Run clippy and fail if any warnings (macos only)
#        if: contains(matrix.platform, 'macos')
#        working-directory: ./src-tauri
#        run: |
#          cargo clippy -- -D warnings

      - name: 📥 Cached install cargo-auditable
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: cargo-auditable@0.6.6
          locked: true

      - name: 📥 Cached install tauri-cli
        uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c # v2.0.1
        with:
          tool: tauri-cli@2.1.0
          locked: true

      - name: 🔨 Build using tauri action (publish artifacts on release)
        id: tauri-action
        uses: tauri-apps/tauri-action@2a8db2c169af2fdc695133781e27ecba52daea75 # v0.5.17
        env:
          RUSTFLAGS: "-D warnings"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.release.outputs.release_id }}
          tauriScript: cargo --locked auditable tauri
          args: ${{ matrix.args }}
          appVersion: ${{ needs.release.outputs.package_version }}
          appName: codefend-panel
          updaterJsonPreferNsis: true
          retryAttempts: 2

      - name: Extract Signatures and Set Outputs - Windows
        if: contains(matrix.platform, 'windows')
        id: extractwindows-signatures
        run: |
          $package_version = "${{ needs.release.outputs.package_version }}"
          
          function Read-Signature {
            param([string]$file)
            
            if (-Not (Test-Path $file)) {
              Write-Error "Error: File $file not found"
              exit 1
            }
            
            $signature = Get-Content $file -Raw
            return $signature.Trim()
          }

          $windows_x86_64_sig = Read-Signature "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\msi\codefend-panel_${package_version}_x64_en-US.msi.sig"
          
          Write-Host "Signatures extracted successfully."
          Write-Host "::set-output name=windows_x86_64_sig::$windows_x86_64_sig"

      - name: Extract Signatures and Set Outputs - MacOs
        if: contains(matrix.platform, 'macos')
        id: extractmacaarch-signatures
        run: |
          package_version="${{ needs.release.outputs.package_version }}"

          read_signature() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              echo "Error: File $file not found" >&2
              exit 1
            fi
            tr -d '\n' < "$file" | xargs
          }

          darwin_aarch64_sig=$(read_signature "src-tauri/target/${{ matrix.arch }}/release/bundle/macos/codefend-panel.app.tar.gz.sig")

          echo "Signatures extracted successfully."
          echo "::set-output name=darwin_aarch64_sig::$darwin_aarch64_sig"

      - name: Extract Signatures and Set Outputs - Ubuntu
        if: contains(matrix.platform, 'ubuntu')
        id: extractlinux-signatures
        run: |
          package_version="${{ needs.release.outputs.package_version }}"

          read_signature() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              echo "Error: File $file not found" >&2
              exit 1
            fi
            tr -d '\n' < "$file" | xargs
          }

          linux_x86_64_sig=$(read_signature "src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/codefend-panel_${package_version}_amd64.AppImage.sig")

          echo "Signatures extracted successfully."
          echo "::set-output name=linux_x86_64_sig::$linux_x86_64_sig"

      - name: 🛡️ Attest build provenance (publish release only)
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        env:
          CARGO_HOME: /home/runner/.cargo
          CARGO_INCREMENTAL: 0
          CARGO_TERM_COLOR: always
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          subject-path: |
            src-tauri/target/**/release/bundle/macos/*.tar.gz*
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/*
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/*
          push-to-registry: false
          show-summary: true
          github-token: ${{ env.GITHUB_TOKEN }}
  
      - name: 📜 Create SBOM
        uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0
        with:
          format: "spdx-json"
          output-file: "sbom.spdx.json"
          artifact-name: "${{ matrix.platform }}${{ matrix.arch }}.sbom.spdx.json"
  
      - name: 🛡️ Attest SBOM
        uses: actions/attest-sbom@cbfd0027ae731a5892db25ecd226930d7ffd19eb # v2
        with:
          subject-path: >-
            ${{ 
              contains(matrix.platform, 'ubuntu') && 'src-tauri/target/x86_64-unknown-linux-gnu/release/codefend-panel' ||
              contains(matrix.platform, 'windows') && 'src-tauri/target/x86_64-pc-windows-msvc/release/codefend-panel.exe' ||
              (contains(matrix.platform, 'macos') && contains(matrix.arch, 'x86_64')) && 'src-tauri/target/x86_64-apple-darwin/release/codefend-panel' ||
              (contains(matrix.platform, 'macos') && contains(matrix.arch, 'aarch64')) && 'src-tauri/target/aarch64-apple-darwin/release/codefend-panel'
            }}
          sbom-path: "sbom.spdx.json"

  endRelease:
    name: End Release
    needs: [release, buildAndPublish]
    if: "github.event.repository.fork == false"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Create Update Manifest Script
        run: |
          package_version="${{ needs.release.outputs.package_version }}"
          pub_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          read_signature() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              echo "Error: File $file not found" >&2
              exit 1
            fi
            tr -d '\n' < "$file" | xargs
          }

          cat > latest.json << EOL
          {
            "version": "${package_version}",
            "notes": "Codefend Panel ${package_version} release",
            "pub_date": "${pub_date}",
            "platforms": {
              "darwin-aarch64": {
                "signature": "${{ needs.buildAndPublish.outputs.darwin_aarch64_sig }}",
                "url": "https://github.com/codefen/codefend-user/releases/download/v${package_version}/codefend-panel_${package_version}_aarch64.dmg"
              },
              "darwin-x86_64": {
                "signature": "${{ needs.buildAndPublish.outputs.darwin_x86_64_sig }}",
                "url": "https://github.com/codefen/codefend-user/releases/download/v${package_version}/codefend-panel_${package_version}_x64.dmg"
              },
              "linux-x86_64": {
                "signature": "${{ needs.buildAndPublish.outputs.linux_x86_64_sig }}",
                "url": "https://github.com/codefen/codefend-user/releases/download/v${package_version}/codefend-panel_${package_version}_amd64.deb"
              },
              "windows-x86_64": {
                "signature": "${{ needs.buildAndPublish.outputs.windows_x86_64_sig }}",
                "url": "https://github.com/codefen/codefend-user/releases/download/v${package_version}/codefend-panel_${package_version}_x64_en-US.msi"
              }
            }
          }
          EOL

          echo "Update manifest generated successfully:"
          cat latest.json

      - name: Commit and Push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add latest.json
          git commit -m "Update latest.json"
          git push

      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.release.outputs.release_id }},
              draft: false,
              prerelease: false
            })
